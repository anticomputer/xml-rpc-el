[[https://elpa.nongnu.org/nongnu/xml-rpc.html][https://elpa.nongnu.org/nongnu/xml-rpc.svg]]
[[https://stable.melpa.org/#/xml-rpc][file:https://stable.melpa.org/packages/xml-rpc-badge.svg]]
[[https://melpa.org/#/xml-rpc][file:https://melpa.org/packages/xml-rpc-badge.svg]]
[[https://github.com/xml-rpc-el/xml-rpc-el/actions][https://github.com/xml-rpc-el/xml-rpc-el/workflows/CI/badge.svg]]

* Commentary:

This is an [[http://xmlrpc.com/][XML-RPC]] client implementation in elisp, capable of both synchronous and asynchronous method calls (using the url package's async retrieval functionality).

XML-RPC is remote procedure calls over HTTP using XML to describe the function call and return values.

xml-rpc.el represents XML-RPC datatypes as lisp values, automatically converting to and from the XML datastructures as needed, both for method parameters and return values, making using XML-RPC methods fairly transparent to the lisp code.

* Installation:

If you use [[http://elpa.gnu.org/][ELPA]], and have configured the [[https://elpa.nongnu.org/][NonGNU ELPA]] or [[https://melpa.org/][MELPA]] repository, then =M-x package-install RET xml-rpc RET= interface. This is preferrable as you will have access to updates automatically.

If you would like to use ELPA, but this is your first time to use it, or NonGNU ELPA/MELPA, then try evaluating the following code in emacs:
#+begin_src elisp
  (progn
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (unless (package-installed-p 'xml-rpc)
      (with-temp-buffer
        (url-insert-file-contents "https://raw.githubusercontent.com/xml-rpc-el/xml-rpc-el/master/xml-rpc.el")
        (package-install-from-buffer))))
#+end_src

Otherwise, just make sure this file in your load-path (usually =~/.emacs.d= is included) and put
#+begin_src elisp
(require 'xml-rpc) 
#+end_src
in your =~/.emacs= or =~/.emacs.d/init.el= file.

* Requirements

xml-rpc.el uses the url package for http handling and =xml.el= for XML parsing or, if you have Emacs 27+ with =libxml= included, =libxml=. The url package that is part of Emacs works fine.

* Bug reports

Please use =M-x xml-rpc-submit-bug-report= to report bugs directly to the maintainer, or use [[https://github.com/xml-rpc-el/xml-rpc-el/issues][github's issue system]].

* Representing data types
 XML-RPC datatypes are represented as follows

| type         | data                                   |
| int          | 42                                     |
| float/double | 42.0                                   |
| string       | "foo"                                  |
| base64       | (list :base64                          |
|              | (base64-encode-string "hello" t))      |
|              | '(:base64 "aGVsbG8=")                  |
| array        | '(1 2 3 4)   '(1 2 3 (4.1 4.2))  [ ]   |
|              | '(:array (("not" "a") ("struct" "!"))) |
| struct       | '(("name" . "daniel")                  |
|              | ("height" . 6.1))                      |
| dateTime     | '(:datetime (1234 124))                |


* Examples

Here follows some examples demonstrating the use of xml-rpc.el

** Normal synchronous operation
#+begin_src elisp
(xml-rpc-method-call "http://localhost:80/RPC" 'foo-method foo bar zoo)
#+end_src

** Asynchronous example (cb-foo will be called when the methods returns)
#+begin_src elisp
(defun cb-foo (foo)
  (print (format "%s" foo)))

(xml-rpc-method-call-async 'cb-foo "http://localhost:80/RPC"
                           'foo-method foo bar zoo)
#+end_src

** Some real world working examples for fun and play
These were last tested working on 2020-09-06.
*** Fetch the first state name from UserLand's server
#+begin_src elisp
  (xml-rpc-method-call "http://betty.userland.com/rpc2"
                       'examples.getStateName '(1))
#+end_src

Results in:

#+begin_example
Alabama
#+end_example

*** Get a list of supported methods from a blog
#+begin_src elisp
  (mapconcat (lambda (s) (when s s))
    (xml-rpc-method-call "https://hexmode.wordpress.com/xmlrpc.php"
                         'mt.supportedMethods)
    ", ")
#+end_src

Results in:
#+begin_example
wp.getUsersBlogs, wp.newPost, wp.editPost, wp.deletePost, wp.getPost, wp.getPosts, wp.newTerm, wp.editTerm, wp.deleteTerm, wp.getTerm, wp.getTerms, wp.getTaxonomy, wp.getTaxonomies, wp.getUser, wp.getUsers, wp.getProfile, wp.editProfile, wp.getPage, wp.getPages, wp.newPage, wp.deletePage, wp.editPage, wp.getPageList, wp.getAuthors, wp.getCategories, wp.getTags, wp.newCategory, wp.deleteCategory, wp.suggestCategories, wp.uploadFile, wp.deleteFile, wp.getCommentCount, wp.getPostStatusList, wp.getPageStatusList, wp.getPageTemplates, wp.getOptions, wp.setOptions, wp.getComment, wp.getComments, wp.deleteComment, wp.editComment, wp.newComment, wp.getCommentStatusList, wp.getMediaItem, wp.getMediaLibrary, wp.getPostFormats, wp.getPostType, wp.getPostTypes, wp.getRevisions, wp.restoreRevision, blogger.getUsersBlogs, blogger.getUserInfo, blogger.getPost, blogger.getRecentPosts, blogger.newPost, blogger.editPost, blogger.deletePost, metaWeblog.newPost, metaWeblog.editPost, metaWeblog.getPost, metaWeblog.getRecentPosts, metaWeblog.getCategories, metaWeblog.newMediaObject, metaWeblog.deletePost, metaWeblog.getUsersBlogs, mt.getCategoryList, mt.getRecentPostTitles, mt.getPostCategories, mt.setPostCategories, mt.supportedMethods, mt.supportedTextFilters, mt.getTrackbackPings, mt.publishPost, pingback.ping, pingback.extensions.getPingbacks, demo.sayHello, demo.addTwoNumbers, wpStats.get_key, wpStats.check_key, wpStats.get_blog_id, wpStats.get_site_id, wpStats.update_bloginfo, wpStats.update_postinfo, wpStats.ping_blog, wpStats.flush_posts, wpcom.get_user_blogids, wpcom.getFeatures, wpcom.addApplicationPassword, wpcom.blackberryUploadFile, wpcom.blackberryGetUploadingFileKeys, wpcom.getUsersSubs, wpcom.set_mobile_push_notification_settings, wpcom.get_mobile_push_notification_settings, wpcom.mobile_push_register_token, wpcom.mobile_push_unregister_token, wpcom.mobile_push_set_blogs_list, wpcom.mobile_push_win_phone_get_last_notification
#+end_example
